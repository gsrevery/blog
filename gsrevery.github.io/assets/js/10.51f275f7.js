(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{355:function(t,i,v){"use strict";v.r(i);var a=v(43),e=Object(a.a)({},(function(){var t=this,i=t.$createElement,v=t._self._c||i;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"git的使用说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git的使用说明"}},[t._v("#")]),t._v(" git的使用说明")]),t._v(" "),v("h2",{attrs:{id:"git的基本操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git的基本操作"}},[t._v("#")]),t._v(" git的基本操作")]),t._v(" "),v("ul",[v("li",[t._v("git pull   //将线上仓库里面的代码拉到本地。")]),t._v(" "),v("li",[t._v("git add -A    //将A文件添加到暂存区。")]),t._v(" "),v("li",[t._v('git commit -m"本次提交名字"   //将暂存区的文件提交到本地的版本库。每次使用git commit 命令我们都会在本地版本库生成一个40位的哈希值，这个哈希值也叫         commit-id，commit-id在版本回退的时候是非常有用的，它相当于一个快照,可以在未来的任何时候通过与git reset的组合命令回到这里。')]),t._v(" "),v("li",[t._v("git push  将本地的代码推到线上的仓库")]),t._v(" "),v("li",[t._v("上述操作为推代码的必须步骤及顺序。")]),t._v(" "),v("li",[t._v("git dff     //查看上传代码")]),t._v(" "),v("li",[t._v("git status    //显示工作目录和暂存区的状态")])]),t._v(" "),v("h2",{attrs:{id:"git的版本回退"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git的版本回退"}},[t._v("#")]),t._v(" git的版本回退")]),t._v(" "),v("ul",[v("li",[t._v("git log   //查看commit的信息，查看历史提交")]),t._v(" "),v("li",[t._v("git reset --soft d125b19d92a1d    //回退到某一个版本，只回退了commit的信息('d125b19d92a1d'是哈希值)")]),t._v(" "),v("li",[t._v("git reset --hard 521d2bdb83  //回退到某一个版本，回退的是本地代码。('d125b19d92a1d'是哈希值即commit号的前几位)")]),t._v(" "),v("li",[t._v("查看本地修改如果没有修改，又想把当前回退的代码提交到仓库中去，可以使用强制提交代码。（这种方式不建议使用，因为提交之后，仓库的历史提交就回退到当前版本了，当前版本之后的提交全部消失。）\ngit reflog  // 查看回退版本后仓库中消失的历史提交记录，适用于解决git reset --hard 回退指定版本代码后需要恢复到原有版本或者消失的版本")]),t._v(" "),v("li",[t._v("git push -f  //强制提交代码。")])]),t._v(" "),v("h2",{attrs:{id:"git的文件存储"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git的文件存储"}},[t._v("#")]),t._v(" git的文件存储")]),t._v(" "),v("ul",[v("li",[t._v("git stash    //将工作区的文件存到暂存区。工作区就没有文件了")]),t._v(" "),v("li",[t._v("git stash apply    //存储文件，工作区和暂存区都有，相当于备份")]),t._v(" "),v("li",[t._v("git stash list    //展示当前存储库中的存储单元列表")]),t._v(" "),v("li",[t._v("git stash pop    //将暂存区的代码释放出去回到工作区。")]),t._v(" "),v("li",[t._v("git stash drop    //移除存储列表中的第一个文件")]),t._v(" "),v("li",[t._v("git stash save login    //保存某一个文件")]),t._v(" "),v("li",[t._v("git reset head src/pages/business-review/details.vue     //取消这个文件的暂存")])]),t._v(" "),v("h2",{attrs:{id:"git提交分支的创建以及切换"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git提交分支的创建以及切换"}},[t._v("#")]),t._v(" git提交分支的创建以及切换")]),t._v(" "),v("ul",[v("li",[t._v("git branch    //查看分支")]),t._v(" "),v("li",[t._v("git branch dev    //创建一个叫“dev”的分支")]),t._v(" "),v("li",[t._v("git branch dev 7c87   //在本地创建一个dev分支并将哈希值为“7c87”版本的代码放在dev分支中")]),t._v(" "),v("li",[t._v("git branch -d dev    //删除一个叫“dev”的分支")]),t._v(" "),v("li",[t._v("git push origin dev // 提交该分支到远程仓库")]),t._v(" "),v("li",[t._v("git push origin -d dev //从远程仓库中删除dev分支（分支删除时不要在需要删除的分支上操作）")]),t._v(" "),v("li",[t._v("git checkout -b ticket/5 origin/master    //分支的切换由ticket/3切换到ticket/5上去")]),t._v(" "),v("li",[t._v("git checkout master    //分支的切换至master")]),t._v(" "),v("li",[t._v("git merge dev  //将dev分支修改的内容合并到当前分支")]),t._v(" "),v("li",[t._v('git merge --no-ff -m "合并dev修改报错" dev  //将dev分支修改的内容合并到当前分支，并重新给一个commit信息')])]),t._v(" "),v("h2",{attrs:{id:"修改git-提交的用户名和用户email命令"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修改git-提交的用户名和用户email命令"}},[t._v("#")]),t._v(" 修改git 提交的用户名和用户Email命令")]),t._v(" "),v("ul",[v("li",[v("h4",{attrs:{id:"首先查看全局配置："}},[v("a",{staticClass:"header-anchor",attrs:{href:"#首先查看全局配置："}},[t._v("#")]),t._v(" 首先查看全局配置：")])])]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("git config  --list")])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("git config --local --list")])]),t._v(" "),v("li",[v("h3",{attrs:{id:"修改全局"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修改全局"}},[t._v("#")]),t._v(" 修改全局")])]),t._v(" "),v("li",[v("p",[t._v("如果你要修改当前全局的用户名和邮箱时，需要在上面的两条命令中添加一个参数，--global，代表的是全局。")])])]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("git config  --global user.name 你的目标用户名。")])])]),t._v(" "),v("ul",[v("li",[v("p",[t._v("git config  --global user.email 你的目标邮箱名。")])]),t._v(" "),v("li",[v("h3",{attrs:{id:"修改当前的project"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#修改当前的project"}},[t._v("#")]),t._v(" 修改当前的project")])])]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("git 修改当前的project的用户名的命令为：git config user.name 你的目标用户名。")])])]),t._v(" "),v("ul",[v("li",[t._v("git 修改当前的project提交邮箱的命令为：git config user.email 你的目标邮箱名。")])]),t._v(" "),v("h2",{attrs:{id:"git在拉取代码时的常见问题"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#git在拉取代码时的常见问题"}},[t._v("#")]),t._v(" git在拉取代码时的常见问题")]),t._v(" "),v("h3",{attrs:{id:"no-1"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#no-1"}},[t._v("#")]),t._v(" NO:1")]),t._v(" "),v("ul",[v("li",[t._v("当你的开发进行到一半,但是代码还不想进行提交 ,然后需要同步去关联远端代码时.如果你本地的代码和远端代码没有冲突时,可以直接通过git pull解决.但是如果可能发生冲突怎么办.直接git pull会拒绝覆盖当前的修改.")])]),t._v(" "),v("blockquote",[v("p",[t._v("解决方法")])]),t._v(" "),v("ol",[v("li",[t._v("git stash    //将工作区的文件存到暂存区。")]),t._v(" "),v("li",[t._v("git pull    //拉一下代码。")]),t._v(" "),v("li",[t._v("git stash pop    //将暂存区的代码释放出去回到工作区。")])]),t._v(" "),v("h3",{attrs:{id:"no-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#no-2"}},[t._v("#")]),t._v(" NO:2")]),t._v(" "),v("blockquote",[v("ul",[v("li",[t._v("error: Pulling is not possible because you have unmerged files.")])])]),t._v(" "),v("ul",[v("li",[t._v("hint: Fix them up in the work tree, and then use 'git add/rm "),v("file",[t._v("'")])],1),t._v(" "),v("li",[t._v("hint: as appropriate to mark resolution and make a commit.")]),t._v(" "),v("li",[t._v("fatal: Exiting because of an unresolved conflict.")])]),t._v(" "),v("blockquote",[v("p",[t._v("解决办法")])]),t._v(" "),v("ul",[v("li",[t._v("回退版本")])])])}),[],!1,null,null,null);i.default=e.exports}}]);